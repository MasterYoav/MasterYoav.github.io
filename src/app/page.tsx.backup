'use client';

import { ChevronDown, Github, Linkedin, Mail, ExternalLink, Menu, X, Code, Palette, Zap, Star, GitFork, Terminal, Cpu, Globe, Rocket, Heart, Coffee, MousePointer, Instagram, Copy, Check } from 'lucide-react';
import React, { useState, useEffect, useRef } from 'react';
import { motion, AnimatePresence, useMotionValue, useSpring, useTransform } from 'framer-motion';
import { useInView } from 'react-intersection-observer';

interface Project {
  title: string;
  description: string;
  tech: string[];
  image: string;
  link: string;
  github: string;
  stars: number;
  forks: number;
  language?: string;
  updated?: string;
}

interface Skill {
  name: string;
  level: number;
  icon: any;
  count: number;
}

// Particle Component
const Particle = ({ x, y, delay }: { x: number; y: number; delay: number }) => {
  return (
    <motion.div
      className="absolute w-1 h-1 bg-purple-400 rounded-full"
      initial={{ opacity: 0, scale: 0 }}
      animate={{
        opacity: [0, 1, 0],
        scale: [0, 1, 0],
        x: [x, x + Math.random() * 100 - 50],
        y: [y, y + Math.random() * 100 - 50],
      }}
      transition={{
        duration: 3,
        delay,
        repeat: Infinity,
        repeatDelay: Math.random() * 2,
      }}
    />
  );
};

// Floating Elements Component
const FloatingElements = () => {
  const particles = Array.from({ length: 20 }, (_, i) => ({
    id: i,
    x: Math.random() * (typeof window !== 'undefined' ? window.innerWidth : 1000),
    y: Math.random() * (typeof window !== 'undefined' ? window.innerHeight : 1000),
    delay: Math.random() * 2,
  }));

  return (
    <div className="fixed inset-0 pointer-events-none z-0">
      {particles.map((particle) => (
        <Particle key={particle.id} {...particle} />
      ))}
    </div>
  );
};

// Interactive Cursor Component
const InteractiveCursor = () => {
  const cursorX = useMotionValue(-100);
  const cursorY = useMotionValue(-100);
  const springConfig = { damping: 25, stiffness: 700 };
  const cursorXSpring = useSpring(cursorX, springConfig);
  const cursorYSpring = useSpring(cursorY, springConfig);

  useEffect(() => {
    const moveCursor = (e: MouseEvent) => {
      cursorX.set(e.clientX - 16);
      cursorY.set(e.clientY - 16);
    };

    window.addEventListener('mousemove', moveCursor);
    return () => window.removeEventListener('mousemove', moveCursor);
  }, [cursorX, cursorY]);

  return (
    <motion.div
      className="fixed w-8 h-8 bg-purple-500/20 rounded-full pointer-events-none z-50 mix-blend-difference"
      style={{
        x: cursorXSpring,
        y: cursorYSpring,
      }}
    />
  );
};

// Typing Animation Component
const TypingAnimation = ({ text, delay = 0 }: { text: string; delay?: number }) => {
  const [displayText, setDisplayText] = useState('');
  const [isTyping, setIsTyping] = useState(false);

  useEffect(() => {
    const timeout = setTimeout(() => {
      setIsTyping(true);
      let i = 0;
      const typingInterval = setInterval(() => {
        if (i < text.length) {
          setDisplayText(text.substring(0, i + 1));
          i++;
        } else {
          clearInterval(typingInterval);
          setIsTyping(false);
        }
      }, 50);

      return () => clearInterval(typingInterval);
    }, delay);

    return () => clearTimeout(timeout);
  }, [text, delay]);

  return (
    <span>
      {displayText}
      {isTyping && <span className="animate-pulse">|</span>}
    </span>
  );
};

export default function Home() {
  const [isMenuOpen, setIsMenuOpen] = useState(false);
  const [activeSection, setActiveSection] = useState('home');
  const [isVisible, setIsVisible] = useState<Record<string, boolean>>({});
  const [projects, setProjects] = useState<Project[]>([]);
  const [skills, setSkills] = useState<Skill[]>([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const [mousePosition, setMousePosition] = useState({ x: 0, y: 0 });
  const [isClient, setIsClient] = useState(false);
  const [emailCopied, setEmailCopied] = useState(false);
  const containerRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    setIsClient(true);
  }, []);

  useEffect(() => {
    const handleMouseMove = (e: MouseEvent) => {
      setMousePosition({ x: e.clientX, y: e.clientY });
    };

    window.addEventListener('mousemove', handleMouseMove);
    return () => window.removeEventListener('mousemove', handleMouseMove);
  }, []);

  const GITHUB_USERNAME = 'MasterYoav';
  const GITHUB_API_URL = `https://api.github.com/users/${GITHUB_USERNAME}/repos`;

  useEffect(() => {
    const fetchGitHubData = async () => {
      try {
        setLoading(true);
        const response = await fetch(GITHUB_API_URL);
        
        if (!response.ok) {
          throw new Error(`GitHub API error: ${response.status}`);
        }
        
        const repos = await response.json();
        
        const filteredRepos = repos
          .filter((repo: any) => !repo.fork && !repo.private)
          .sort((a: any, b: any) => b.stargazers_count - a.stargazers_count)
          .slice(0, 6);

        const projectsData = filteredRepos.map((repo: any) => ({
          title: repo.name.replace(/-/g, ' ').replace(/\b\w/g, (l: string) => l.toUpperCase()),
          description: repo.description || 'No description available',
          tech: repo.language ? [repo.language] : ['JavaScript'],
          image: '',
          link: repo.homepage || repo.html_url,
          github: repo.html_url,
          stars: repo.stargazers_count,
          forks: repo.forks_count,
          language: repo.language,
          updated: new Date(repo.updated_at).toLocaleDateString()
        }));

        setProjects(projectsData);

        const languageStats: Record<string, number> = {};
        repos.forEach((repo: any) => {
          if (repo.language) {
            languageStats[repo.language] = (languageStats[repo.language] || 0) + 1;
          }
        });

        const totalRepos = Object.values(languageStats).reduce((a: number, b: number) => a + b, 0);
        const topLanguages = Object.entries(languageStats)
          .sort(([,a], [,b]) => b - a)
          .slice(0, 6)
          .map(([lang, count]) => ({
            name: lang,
            level: Math.round((count / totalRepos) * 100),
            icon: getLanguageIcon(lang),
            count: count
          }));

        setSkills(topLanguages);
        setError(null);
      } catch (err) {
        console.error('Error fetching GitHub data:', err);
        setError('Failed to load GitHub data. Using sample data.');
        
        setProjects([
          {
            title: "Sample Project",
            description: "Unable to fetch from GitHub. This is sample data.",
            tech: ["JavaScript", "React"],
            image: '',
            link: "#",
            github: "#",
            stars: 0,
            forks: 0
          }
        ]);
        
        setSkills([
          { name: "JavaScript", level: 85, icon: Code, count: 10 },
          { name: "React", level: 80, icon: Palette, count: 8 },
          { name: "Node.js", level: 75, icon: Zap, count: 6 }
        ]);
      } finally {
        setLoading(false);
      }
    };

    fetchGitHubData();
  }, []);

  const getLanguageIcon = (language: string) => {
    const icons: Record<string, any> = {
      'JavaScript': Code,
      'TypeScript': Code,
      'Python': Code,
      'Java': Code,
      'C++': Code,
      'C#': Code,
      'HTML': Palette,
      'CSS': Palette,
      'React': Palette,
      'Vue': Palette,
      'Angular': Palette,
      'Node.js': Zap,
      'Express': Zap,
      'MongoDB': Zap,
      'PostgreSQL': Zap,
      'MySQL': Zap
    };
    return icons[language] || Code;
  };

  const scrollToSection = (sectionId: string) => {
    const element = document.getElementById(sectionId);
    if (element) {
      element.scrollIntoView({ behavior: 'smooth' });
      setIsMenuOpen(false);
    }
  };

  const copyEmailToClipboard = async () => {
    try {
      await navigator.clipboard.writeText('realyoavperetz@gmail.com');
      setEmailCopied(true);
      setTimeout(() => setEmailCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy email:', err);
    }
  };

  useEffect(() => {
    const observer = new IntersectionObserver(
      (entries) => {
        entries.forEach((entry) => {
          if (entry.isIntersecting) {
            setIsVisible(prev => ({ ...prev, [entry.target.id]: true }));
            setActiveSection(entry.target.id);
          }
        });
      },
      { threshold: 0.3 }
    );

    const sections = document.querySelectorAll('section[id]');
    sections.forEach((section) => observer.observe(section));

    return () => observer.disconnect();
  }, []);

  return (
    <div ref={containerRef} className="min-h-screen bg-gradient-to-br from-gray-900 via-slate-800 to-gray-900 relative overflow-hidden">
      {/* Removed custom cursor - using OS cursor */}
      
      {/* Floating Particles */}
      {isClient && <FloatingElements />}
      
      {/* Animated Background Grid */}
      <div className="fixed inset-0 opacity-20 pointer-events-none">
        <motion.div
          className="absolute inset-0 bg-gradient-to-r from-blue-500/10 via-green-500/10 to-purple-500/10"
          animate={{
            backgroundPosition: ['0% 0%', '100% 100%', '0% 0%'],
          }}
          transition={{
            duration: 20,
            repeat: Infinity,
            ease: 'linear',
          }}
          style={{ backgroundSize: '200% 200%' }}
        />
        <motion.div
          className="absolute inset-0"
          style={{
            backgroundImage: `radial-gradient(circle at ${mousePosition.x}px ${mousePosition.y}px, rgba(59, 130, 246, 0.15) 0%, transparent 50%)`,
          }}
        />
      </div>

      {/* Navigation */}
      <motion.nav 
        className="fixed top-0 w-full bg-slate-900/95 backdrop-blur-sm z-50 border-b border-slate-800"
        initial={{ y: -100 }}
        animate={{ y: 0 }}
        transition={{ duration: 0.5 }}
      >
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <motion.div 
              className="text-2xl font-bold bg-gradient-to-r from-blue-400 via-green-400 to-purple-400 bg-clip-text text-transparent animate-gradient"
              whileHover={{ scale: 1.05 }}
              whileTap={{ scale: 0.95 }}
            >
              MasterYoav
            </motion.div>
            
            {/* Desktop Navigation */}
            <div className="hidden md:flex space-x-8">
              {['home', 'about', 'projects', 'contact'].map((section, index) => (
                <motion.button
                  key={section}
                  onClick={() => scrollToSection(section)}
                  className={`capitalize transition-colors relative ${
                    activeSection === section
                      ? 'text-blue-400'
                      : 'text-slate-300 hover:text-white'
                  }`}
                  whileHover={{ scale: 1.1 }}
                  whileTap={{ scale: 0.9 }}
                  initial={{ opacity: 0, y: -20 }}
                  animate={{ opacity: 1, y: 0 }}
                  transition={{ delay: index * 0.1 }}
                >
                  {section}
                  {activeSection === section && (
                    <motion.div
                      className="absolute -bottom-1 left-0 right-0 h-0.5 bg-gradient-to-r from-blue-400 to-green-400"
                      layoutId="activeSection"
                    />
                  )}
                </motion.button>
              ))}
            </div>

            {/* Mobile menu button */}
            <motion.button
              onClick={() => setIsMenuOpen(!isMenuOpen)}
              className="md:hidden text-slate-300 hover:text-white"
              whileHover={{ scale: 1.1 }}
              whileTap={{ scale: 0.9 }}
            >
              <AnimatePresence mode="wait">
                {isMenuOpen ? (
                  <motion.div
                    key="close"
                    initial={{ rotate: 0 }}
                    animate={{ rotate: 180 }}
                    exit={{ rotate: 0 }}
                    transition={{ duration: 0.2 }}
                  >
                    <X size={24} />
                  </motion.div>
                ) : (
                  <motion.div
                    key="menu"
                    initial={{ rotate: 180 }}
                    animate={{ rotate: 0 }}
                    exit={{ rotate: 180 }}
                    transition={{ duration: 0.2 }}
                  >
                    <Menu size={24} />
                  </motion.div>
                )}
              </AnimatePresence>
            </motion.button>
          </div>

          {/* Mobile Navigation */}
          <AnimatePresence>
            {isMenuOpen && (
              <motion.div 
                className="md:hidden pb-4"
                initial={{ height: 0, opacity: 0 }}
                animate={{ height: 'auto', opacity: 1 }}
                exit={{ height: 0, opacity: 0 }}
                transition={{ duration: 0.3 }}
              >
                <div className="flex flex-col space-y-2">
                  {['home', 'about', 'projects', 'contact'].map((section, index) => (
                    <motion.button
                      key={section}
                      onClick={() => scrollToSection(section)}
                      className="capitalize text-left py-2 text-slate-300 hover:text-white transition-colors"
                      initial={{ x: -20, opacity: 0 }}
                      animate={{ x: 0, opacity: 1 }}
                      transition={{ delay: index * 0.1 }}
                      whileHover={{ x: 10 }}
                    >
                      {section}
                    </motion.button>
                  ))}
                </div>
              </motion.div>
            )}
          </AnimatePresence>
        </div>
      </motion.nav>

      {/* Hero Section */}
      <section id="home" className="min-h-screen flex items-center justify-center relative">
        <div className="max-w-4xl mx-auto text-center px-4">
          <motion.div
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
          >
            <motion.h1 
              className="text-5xl md:text-7xl font-bold mb-6"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.2, duration: 0.8 }}
            >
              <motion.span 
                className="bg-gradient-to-r from-blue-400 via-green-400 to-purple-400 bg-clip-text text-transparent animate-gradient"
                initial={{ opacity: 0 }}
                animate={{ opacity: 1 }}
                transition={{ delay: 0.5, duration: 0.8 }}
              >
                Hello, I'm
              </motion.span>
              <br />
              <motion.span 
                className="text-slate-100"
                initial={{ opacity: 0, scale: 0.8 }}
                animate={{ opacity: 1, scale: 1 }}
                transition={{ delay: 0.8, duration: 0.5 }}
              >
                Yoav
              </motion.span>
            </motion.h1>
            
            <motion.p 
              className="text-xl md:text-2xl text-slate-300 mb-8 max-w-2xl mx-auto"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 1, duration: 0.8 }}
            >
              <TypingAnimation 
                text="Full-Stack Developer & Creative Technologist building innovative digital experiences with code and creativity" 
                delay={1200}
              />
            </motion.p>
            
            <motion.div 
              className="flex flex-col sm:flex-row gap-4 justify-center"
              initial={{ opacity: 0, y: 20 }}
              animate={{ opacity: 1, y: 0 }}
              transition={{ delay: 1.5, duration: 0.8 }}
            >
              <motion.button
                onClick={() => scrollToSection('projects')}
                className="glass bg-gradient-to-r from-blue-500 to-green-500 hover:from-blue-600 hover:to-green-600 text-white px-8 py-3 rounded-lg font-semibold transition-all duration-300 transform hover:scale-105 relative overflow-hidden shadow-glow"
                whileHover={{ scale: 1.05, boxShadow: "0 0 30px rgba(59, 130, 246, 0.8)" }}
                whileTap={{ scale: 0.95 }}
              >
                <span className="relative z-10">View My Work</span>
                <motion.div
                  className="absolute inset-0 bg-gradient-to-r from-blue-600 to-green-600"
                  initial={{ x: '-100%' }}
                  whileHover={{ x: '0%' }}
                  transition={{ duration: 0.3 }}
                />
              </motion.button>
              
              <motion.button
                onClick={() => scrollToSection('contact')}
                className="glass border-2 border-cyan-400 text-cyan-400 hover:bg-cyan-400 hover:text-white px-8 py-3 rounded-lg font-semibold transition-all duration-300 relative overflow-hidden"
                whileHover={{ scale: 1.05 }}
                whileTap={{ scale: 0.95 }}
              >
                <span className="relative z-10">Get In Touch</span>
                <motion.div
                  className="absolute inset-0 bg-cyan-400"
                  initial={{ scale: 0 }}
                  whileHover={{ scale: 1 }}
                  transition={{ duration: 0.3 }}
                />
              </motion.button>
            </motion.div>
          </motion.div>
        </div>
        
        {/* Scroll indicator */}
        <motion.div 
          className="absolute bottom-8 left-1/2 transform -translate-x-1/2 animate-bounce"
          animate={{ y: [0, 10, 0] }}
          transition={{ repeat: Infinity, duration: 2 }}
        >
          <ChevronDown className="text-slate-400" size={32} />
        </motion.div>
        
        {/* Floating Icons */}
        <div className="absolute inset-0 pointer-events-none">
          <motion.div
            className="absolute top-1/4 left-1/4 text-blue-400/20 animate-float"
            animate={{ rotate: 360, y: [0, -20, 0] }}
            transition={{ rotate: { duration: 10, repeat: Infinity }, y: { duration: 3, repeat: Infinity } }}
          >
            <Terminal size={48} />
          </motion.div>
          <motion.div
            className="absolute top-1/3 right-1/4 text-green-400/20 animate-float"
            animate={{ rotate: -360, y: [0, 20, 0] }}
            transition={{ rotate: { duration: 8, repeat: Infinity }, y: { duration: 4, repeat: Infinity } }}
          >
            <Rocket size={40} />
          </motion.div>
          <motion.div
            className="absolute bottom-1/3 left-1/6 text-purple-400/20 animate-float"
            animate={{ rotate: 360, x: [0, 10, 0] }}
            transition={{ rotate: { duration: 12, repeat: Infinity }, x: { duration: 2, repeat: Infinity } }}
          >
            <Globe size={36} />
          </motion.div>
        </div>
      </section>

      {/* About Section */}
      <section id="about" className="py-20 bg-slate-800/50 relative overflow-hidden">
        <div className="max-w-6xl mx-auto px-4">
          <motion.div
            initial={{ opacity: 0, y: 50 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
          >
            <motion.h2 
              className="text-4xl font-bold text-center mb-16 bg-gradient-to-r from-blue-400 via-green-400 to-purple-400 bg-clip-text text-transparent animate-gradient"
              initial={{ opacity: 0, scale: 0.8 }}
              whileInView={{ opacity: 1, scale: 1 }}
              transition={{ delay: 0.2, duration: 0.8 }}
              viewport={{ once: true }}
            >
              About Me
            </motion.h2>
            
            <div className="grid md:grid-cols-2 gap-12 items-center">
              <motion.div
                initial={{ opacity: 0, x: -50 }}
                whileInView={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.4, duration: 0.8 }}
                viewport={{ once: true }}
              >
                <motion.h3 
                  className="text-2xl font-semibold text-slate-100 mb-6"
                  initial={{ opacity: 0, y: 20 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.6, duration: 0.6 }}
                  viewport={{ once: true }}
                >
                  Passionate about creating amazing digital experiences
                </motion.h3>
                
                <motion.p 
                  className="text-slate-300 mb-6 leading-relaxed"
                  initial={{ opacity: 0, y: 20 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  transition={{ delay: 0.8, duration: 0.6 }}
                  viewport={{ once: true }}
                >
                  I'm a dedicated developer who loves turning complex problems into 
                  simple, beautiful solutions. With expertise in both frontend and 
                  backend development, I create full-stack applications that make 
                  a real impact.
                </motion.p>
                
                <motion.p 
                  className="text-slate-300 mb-8 leading-relaxed"
                  initial={{ opacity: 0, y: 20 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  transition={{ delay: 1, duration: 0.6 }}
                  viewport={{ once: true }}
                >
                  When I'm not coding, you can find me exploring new technologies, 
                  contributing to open-source projects, or experimenting with creative 
                  coding and digital art.
                </motion.p>
                
                <motion.div 
                  className="flex space-x-4"
                  initial={{ opacity: 0, y: 20 }}
                  whileInView={{ opacity: 1, y: 0 }}
                  transition={{ delay: 1.2, duration: 0.6 }}
                  viewport={{ once: true }}
                >
                  {[
                    { icon: Github, href: "https://github.com/MasterYoav", label: "GitHub" },
                    { icon: Linkedin, href: "#", label: "LinkedIn" },
                    { icon: Mail, href: "#", label: "Email" }
                  ].map((social, index) => (
                    <motion.a
                      key={social.label}
                      href={social.href}
                      target={social.href.startsWith('http') ? '_blank' : undefined}
                      rel={social.href.startsWith('http') ? 'noopener noreferrer' : undefined}
                      className="glass text-slate-400 hover:text-blue-400 transition-colors p-3 rounded-full hover:bg-blue-500/10 shadow-glow"
                      whileHover={{ scale: 1.2, rotate: 5 }}
                      whileTap={{ scale: 0.9 }}
                      initial={{ opacity: 0, y: 20 }}
                      whileInView={{ opacity: 1, y: 0 }}
                      transition={{ delay: 1.4 + index * 0.1, duration: 0.4 }}
                      viewport={{ once: true }}
                    >
                      <social.icon size={24} />
                    </motion.a>
                  ))}
                </motion.div>
              </motion.div>
              
              <motion.div 
                className="space-y-6"
                initial={{ opacity: 0, x: 50 }}
                whileInView={{ opacity: 1, x: 0 }}
                transition={{ delay: 0.4, duration: 0.8 }}
                viewport={{ once: true }}
              >
                {loading ? (
                  Array(3).fill(0).map((_, index) => (
                    <motion.div 
                      key={index} 
                      className="glass p-6 rounded-lg skeleton"
                      initial={{ opacity: 0, y: 20 }}
                      animate={{ opacity: 1, y: 0 }}
                      transition={{ delay: index * 0.1 }}
                    >
                      <div className="flex items-center mb-4">
                        <div className="w-6 h-6 bg-slate-700 rounded mr-3"></div>
                        <div className="h-4 bg-slate-700 rounded w-32"></div>
                      </div>
                      <div className="w-full bg-slate-700 rounded-full h-2 mb-2"></div>
                      <div className="h-3 bg-slate-700 rounded w-16"></div>
                    </motion.div>
                  ))
                ) : (
                  skills.map((skill, index) => (
                    <motion.div 
                      key={skill.name} 
                      className="glass p-6 rounded-lg hover:bg-slate-900/70 transition-colors duration-300 group interactive"
                      initial={{ opacity: 0, y: 20 }}
                      whileInView={{ opacity: 1, y: 0 }}
                      transition={{ delay: 0.6 + index * 0.1, duration: 0.6 }}
                      viewport={{ once: true }}
                      whileHover={{ scale: 1.02, boxShadow: "0 10px 25px rgba(139, 92, 246, 0.2)" }}
                    >
                      <div className="flex items-center mb-4">
                        <motion.div
                          className="text-blue-400 mr-3"
                          whileHover={{ rotate: 360 }}
                          transition={{ duration: 0.5 }}
                        >
                          <skill.icon size={24} />
                        </motion.div>
                        <div className="flex-1">
                          <h4 className="text-slate-100 font-semibold">{skill.name}</h4>
                          <span className="text-slate-400 text-sm">
                            {skill.count} {skill.count === 1 ? 'project' : 'projects'}
                          </span>
                        </div>
                        <motion.div
                          className="text-slate-400 text-sm font-mono"
                          initial={{ opacity: 0 }}
                          whileInView={{ opacity: 1 }}
                          transition={{ delay: 1 + index * 0.1 }}
                          viewport={{ once: true }}
                        >
                          {skill.level}%
                        </motion.div>
                      </div>
                      <div className="w-full bg-slate-700 rounded-full h-2 relative overflow-hidden">
                        <motion.div 
                          className="bg-gradient-to-r from-blue-500 to-green-500 h-2 rounded-full relative animate-glow"
                          initial={{ width: 0 }}
                          whileInView={{ width: `${skill.level}%` }}
                          transition={{ 
                            delay: 0.8 + index * 0.2, 
                            duration: 1,
                            ease: "easeOut"
                          }}
                          viewport={{ once: true }}
                        >
                          <div className="absolute inset-0 bg-gradient-to-r from-white/20 to-transparent animate-pulse" />
                        </motion.div>
                      </div>
                    </motion.div>
                  ))
                )}
              </motion.div>
            </div>
          </motion.div>
        </div>
      </section>

      {/* Projects Section */}
      <section id="projects" className="py-20 relative">
        <div className="max-w-6xl mx-auto px-4">
          <motion.div
            initial={{ opacity: 0, y: 50 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
          >
            <motion.h2 
              className="text-4xl font-bold text-center mb-16 bg-gradient-to-r from-blue-400 via-green-400 to-purple-400 bg-clip-text text-transparent animate-gradient"
              initial={{ opacity: 0, scale: 0.8 }}
              whileInView={{ opacity: 1, scale: 1 }}
              transition={{ delay: 0.2, duration: 0.8 }}
              viewport={{ once: true }}
            >
              Featured Projects
            </motion.h2>
            
            <div className="grid grid-cols-4 gap-6">
              {loading ? (
                Array(6).fill(0).map((_, index) => (
                  <motion.div 
                    key={index} 
                    className="glass rounded-xl overflow-hidden skeleton aspect-square"
                    initial={{ opacity: 0, y: 50 }}
                    animate={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1 }}
                  >
                    <div className="p-2 sm:p-3 md:p-4 lg:p-6 h-full flex flex-col justify-center items-center">
                      <div className="h-3 sm:h-4 bg-slate-700 rounded mb-2 sm:mb-3 w-3/4"></div>
                      <div className="h-2 sm:h-3 bg-slate-700 rounded mb-2 sm:mb-4 flex-1 w-full"></div>
                      <div className="flex gap-2 mt-auto">
                        <div className="h-4 sm:h-6 w-12 sm:w-16 bg-slate-700 rounded-full"></div>
                      </div>
                    </div>
                  </motion.div>
                ))
              ) : (
                projects.map((project, index) => (
                  <motion.div
                    key={project.title}
                    className="group glass rounded-xl overflow-hidden cursor-pointer interactive aspect-square relative"
                    initial={{ opacity: 0, y: 50 }}
                    whileInView={{ opacity: 1, y: 0 }}
                    transition={{ delay: index * 0.1, duration: 0.6 }}
                    viewport={{ once: true }}
                    whileHover={{ 
                      scale: 1.05,
                      boxShadow: "0 25px 50px -12px rgba(59, 130, 246, 0.4)"
                    }}
                  >
                    {/* Stars indicator - top left - responsive */}
                    {project.stars > 0 && (
                      <motion.div 
                        className="absolute top-1 sm:top-2 md:top-3 left-1 sm:left-2 md:left-3 z-10 bg-gradient-to-r from-yellow-400 to-orange-400 text-slate-900 px-1 sm:px-2 py-1 rounded-full text-xs font-bold flex items-center shadow-lg"
                        initial={{ scale: 0 }}
                        animate={{ scale: 1 }}
                        transition={{ delay: 0.2 + index * 0.1 }}
                      >
                        <Star size={10} className="mr-1 sm:mr-1 fill-current" />
                        <span className="text-xs">{project.stars}</span>
                      </motion.div>
                    )}

                    {/* Github action button - top right, visible on hover - responsive */}
                    <div className="absolute top-1 sm:top-2 md:top-3 right-1 sm:right-2 md:right-3 z-10 opacity-0 group-hover:opacity-100 transition-opacity duration-200">
                      <motion.a
                        href={project.github}
                        target="_blank"
                        rel="noopener noreferrer"
                        className="glass border-2 border-green-400 text-green-400 hover:bg-green-400 hover:text-white p-2 rounded-full transition-all duration-300 inline-flex items-center justify-center"
                        whileHover={{ scale: 1.1, rotate: 5 }}
                        whileTap={{ scale: 0.9 }}
                      >
                        <Github size={16} />
                      </motion.a>
                    </div>
                    
                    {/* Content - Responsive and Centered with proper spacing to avoid collision */}
                    <div className="p-2 sm:p-3 md:p-4 lg:p-6 h-full flex flex-col justify-center items-center text-center">
                      {/* Add top margin to prevent collision with stars badge */}
                      <div className="flex-1 flex flex-col justify-center items-center w-full mt-6 sm:mt-8 md:mt-6 lg:mt-4">
                        <h3 className="text-xs sm:text-sm md:text-base lg:text-lg font-semibold text-slate-100 mb-1 sm:mb-2 md:mb-3 line-clamp-2 leading-tight px-2">{project.title}</h3>
                        <p className="text-slate-300 mb-2 sm:mb-3 md:mb-4 text-xs sm:text-xs md:text-sm line-clamp-3 leading-relaxed px-2">{project.description}</p>
                        
                        {/* Only show primary language, no duplicates */}
                        {project.language && (
                          <div className="mb-1 sm:mb-2 md:mb-3">
                            <span className="bg-gradient-to-r from-blue-500 to-cyan-500 text-white px-2 sm:px-2 md:px-3 py-1 rounded-full text-xs sm:text-xs md:text-sm glass inline-block">
                              {project.language}
                            </span>
                          </div>
                        )}
                      </div>
                      
                      {project.updated && (
                        <p className="text-slate-400 text-xs sm:text-xs md:text-xs mt-auto">Updated: {project.updated}</p>
                      )}
                    </div>
                  </motion.div>
                ))
              )}
            </div>
            
            {error && (
              <motion.div 
                className="mt-8 p-4 glass bg-amber-900/20 border border-amber-500/50 rounded-lg"
                initial={{ opacity: 0, y: 20 }}
                animate={{ opacity: 1, y: 0 }}
                transition={{ delay: 0.5 }}
              >
                <p className="text-amber-300 text-center">{error}</p>
              </motion.div>
            )}
          </motion.div>
        </div>
      </section>

      {/* Contact Section */}
      <section id="contact" className="py-20 bg-slate-800/50">
        <div className="max-w-4xl mx-auto px-4 text-center">
          <motion.div
            initial={{ opacity: 0, y: 50 }}
            whileInView={{ opacity: 1, y: 0 }}
            transition={{ duration: 0.8 }}
            viewport={{ once: true }}
          >
            <motion.h2 
              className="text-4xl font-bold mb-8 bg-gradient-to-r from-blue-400 via-green-400 to-purple-400 bg-clip-text text-transparent animate-gradient"
              initial={{ opacity: 0, scale: 0.8 }}
              whileInView={{ opacity: 1, scale: 1 }}
              transition={{ delay: 0.2, duration: 0.8 }}
              viewport={{ once: true }}
            >
              Let's Work Together
            </motion.h2>
            
            <motion.p 
              className="text-xl text-slate-300 mb-12 max-w-2xl mx-auto"
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.4, duration: 0.6 }}
              viewport={{ once: true }}
            >
              Have a project in mind? I'd love to hear about it. 
              Let's create something amazing together.
            </motion.p>
            
            <motion.div 
              className="flex flex-col sm:flex-row gap-6 justify-center items-center"
              initial={{ opacity: 0, y: 20 }}
              whileInView={{ opacity: 1, y: 0 }}
              transition={{ delay: 0.6, duration: 0.6 }}
              viewport={{ once: true }}
            >
              {/* Email Copy Button */}
              <motion.button
                onClick={copyEmailToClipboard}
                className="glass bg-gradient-to-r from-blue-500 to-green-500 hover:from-blue-600 hover:to-green-600 text-white px-8 py-4 rounded-lg font-semibold transition-all duration-300 transform hover:scale-105 inline-flex items-center justify-center shadow-glow interactive"
                whileHover={{ scale: 1.05, boxShadow: "0 0 30px rgba(59, 130, 246, 0.8)" }}
                whileTap={{ scale: 0.95 }}
              >
                {emailCopied ? (
                  <>
                    <Check className="mr-2" size={20} />
                    Copied!
                  </>
                ) : (
                  <>
                    <Copy className="mr-2" size={20} />
                    realyoavperetz@gmail.com
                  </>
                )}
              </motion.button>
              
              {/* Social Media Links */}
              <div className="flex gap-4">
                <motion.a
                  href="https://www.instagram.com/yoavperetz/"
                  target="_blank"
                  rel="noopener noreferrer"
                  className="glass border-2 border-purple-400 text-purple-400 hover:bg-purple-400 hover:text-white p-4 rounded-full transition-all duration-300 inline-flex items-center justify-center interactive"
                  whileHover={{ scale: 1.1, rotate: 5 }}
                  whileTap={{ scale: 0.9 }}
                >
                  <Instagram size={24} />
                </motion.a>
                
                <motion.a
                  href="https://github.com/MasterYoav"
                  target="_blank"
                  rel="noopener noreferrer"
                  className="glass border-2 border-green-400 text-green-400 hover:bg-green-400 hover:text-white p-4 rounded-full transition-all duration-300 inline-flex items-center justify-center interactive"
                  whileHover={{ scale: 1.1, rotate: -5 }}
                  whileTap={{ scale: 0.9 }}
                >
                  <Github size={24} />
                </motion.a>
              </div>
            </motion.div>
          </motion.div>
        </div>
      </section>

      {/* Footer */}
      <footer className="py-8 border-t border-slate-800">
        <div className="max-w-6xl mx-auto px-4 text-center">
          <motion.p 
            className="text-slate-400"
            initial={{ opacity: 0 }}
            whileInView={{ opacity: 1 }}
            transition={{ delay: 0.2, duration: 0.6 }}
            viewport={{ once: true }}
          >
            © 2025 Yoav. Built with Next.js & Tailwind CSS.
          </motion.p>
        </div>
      </footer>
    </div>
  );
}
